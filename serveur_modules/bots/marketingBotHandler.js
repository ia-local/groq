// bots/marketingBotHandler.js

let gemini; // Will be assigned from dependencies

// Helper function to generate content with Gemini
async function generateGeminiContent(prompt, systemInstruction, modelName = 'gemini-1.5-flash') {
    try {
        if (!gemini) throw new Error("Gemini API not initialized for Marketing Bot.");
        const model = gemini.getGenerativeModel({ model: modelName });
        const chat = model.startChat({
            generationConfig: {
                maxOutputTokens: 2048,
                temperature: 0.7,
                topP: 0.95,
                topK: 60,
            },
        });
        const result = await chat.sendMessage([
            { text: systemInstruction },
            { text: prompt }
        ]);
        return result.response.text();
    } catch (error) {
        console.error("Erreur lors de la g√©n√©ration de contenu Gemini (Marketing Bot):", error);
        throw new Error("Impossible de g√©n√©rer le contenu marketing.");
    }
}

function init(bot, dependencies) {
    gemini = dependencies.gemini;

    // Commande pour g√©n√©rer une id√©e de campagne marketing
    bot.command('campaign', async (ctx) => {
        const topic = ctx.message.text.split(' ').slice(1).join(' ');
        if (!topic) {
            ctx.reply("Veuillez fournir un sujet pour la campagne marketing. Ex: `/campaign lancement nouveau produit IA`");
            return;
        }
        ctx.reply("üí° Brainstorming d'id√©es de campagne pour vous...");
        try {
            const systemPrompt = "Vous √™tes un strat√®ge marketing cr√©atif. G√©n√©rez des id√©es de campagnes innovantes et des slogans accrocheurs pour le sujet donn√©. Incluez des suggestions de canaux.";
            const userPrompt = `Id√©es de campagne et slogans pour : "${topic}"`;
            const content = await generateGeminiContent(userPrompt, systemPrompt, 'gemini-1.5-pro'); // Pro pour des id√©es plus riches
            await ctx.reply(`Voici quelques id√©es de campagne pour "${topic}" :\n\n${content}`, { parse_mode: 'Markdown' });
        } catch (error) {
            ctx.reply("D√©sol√©, je n'ai pas pu g√©n√©rer d'id√©es de campagne. Veuillez r√©essayer plus tard.");
        }
    });

    // Commande pour g√©n√©rer un post pour les r√©seaux sociaux
    bot.command('socialpost', async (ctx) => {
        const postDetails = ctx.message.text.split(' ').slice(1).join(' ');
        if (!postDetails) {
            ctx.reply("Veuillez fournir les d√©tails pour le post social. Ex: `/socialpost Annonce: Notre nouvelle fonctionnalit√© de chat vocal est l√† ! #AI #Innovation`");
            return;
        }
        ctx.reply("‚úçÔ∏è R√©daction de votre post pour les r√©seaux sociaux...");
        try {
            const systemPrompt = "Vous √™tes un expert en r√©daction pour les r√©seaux sociaux. Cr√©ez un post engageant, concis et optimis√© pour le partage, en incluant des emojis pertinents et des hashtags si n√©cessaire.";
            const userPrompt = `R√©dige un post pour les r√©seaux sociaux bas√© sur : "${postDetails}"`;
            const content = await generateGeminiContent(userPrompt, systemPrompt);
            await ctx.reply(`Votre post est pr√™t :\n\n${content}`);
        } catch (error) {
            ctx.reply("D√©sol√©, je n'ai pas pu r√©diger le post social. Veuillez r√©essayer plus tard.");
        }
    });

    // R√©ponse par d√©faut
    bot.on('message', (ctx) => {
        if (!ctx.message.text.startsWith('/')) {
            ctx.reply("Salut ! Je suis votre bot Marketing. Utilisez `/campaign [sujet]` pour des id√©es ou `/socialpost [d√©tails]` pour r√©diger un post.");
        }
    });

    console.log("Marketing Bot handler initialized.");
}

module.exports = { init };