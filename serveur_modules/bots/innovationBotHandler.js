// bots/innovationBotHandler.js

let gemini; // Essential for creative brainstorming

// Helper function to generate innovative ideas
async function generateInnovationIdea(prompt, modelName = 'gemini-1.5-pro') { // Use Pro for more complex ideas
    try {
        if (!gemini) throw new Error("Gemini API not initialized for Innovation Bot.");
        const model = gemini.getGenerativeModel({ model: modelName });
        const systemInstruction = "Vous √™tes un catalyseur d'innovation et un expert en brainstorming. G√©n√©rez des id√©es cr√©atives, disruptives et r√©alisables pour le sujet donn√©. Pensez 'out of the box' mais avec une touche de pragmatisme.";
        const userPrompt = `G√©n√®re des id√©es d'innovation pour : "${prompt}"`;
        const result = await model.startChat({
            generationConfig: { maxOutputTokens: 1500, temperature: 0.9, topP: 1, topK: 50 }, // Temp√©rature √©lev√©e pour la cr√©ativit√©
        }).sendMessage([
            { text: systemInstruction },
            { text: userPrompt }
        ]);
        return result.response.text();
    } catch (error) {
        console.error("Erreur lors de la g√©n√©ration d'id√©es d'innovation (Innovation Bot):", error);
        throw new Error("Impossible de g√©n√©rer des id√©es innovantes.");
    }
}

function init(bot, dependencies) {
    gemini = dependencies.gemini;

    // Commande pour lancer une session de brainstorming
    bot.command('brainstorm', async (ctx) => {
        const topic = ctx.message.text.split(' ').slice(1).join(' ');
        if (!topic) {
            ctx.reply("Veuillez fournir un sujet pour le brainstorming. Ex: `/brainstorm Nouvelle fonctionnalit√© pour les bots`");
            return;
        }
        ctx.reply("‚ú® Lancement d'une session de brainstorming. Pr√©parez-vous √† l'innovation !");
        try {
            const ideas = await generateInnovationIdea(topic);
            await ctx.reply(`Voici quelques id√©es innovantes pour "${topic}" :\n\n${ideas}`, { parse_mode: 'Markdown' });
        } catch (error) {
            ctx.reply("D√©sol√©, je n'ai pas pu lancer le brainstorming. R√©essayez avec un autre sujet.");
        }
    });

    // Commande pour analyser une tendance
    bot.command('trend', async (ctx) => {
        const trend = ctx.message.text.split(' ').slice(1).join(' ');
        if (!trend) {
            ctx.reply("Veuillez sp√©cifier la tendance √† analyser. Ex: `/trend IA g√©n√©rative dans l'√©ducation`");
            return;
        }
        ctx.reply("üìà Analyse de la tendance...");
        try {
            const systemPrompt = "Vous √™tes un analyste de tendances futuriste. Analysez la tendance sp√©cifi√©e, identifiez ses impacts potentiels, ses opportunit√©s et ses d√©fis pour une startup technologique.";
            const userPrompt = `Analyse de la tendance : "${trend}"`;
            const analysis = await generateInnovationIdea(userPrompt, 'gemini-1.5-pro'); // Pro pour l'analyse
            await ctx.reply(`Voici une analyse de la tendance "${trend}" :\n\n${analysis}`, { parse_mode: 'Markdown' });
        } catch (error) {
            ctx.reply("D√©sol√©, je n'ai pas pu analyser la tendance. Veuillez r√©essayer.");
        }
    });

    // R√©ponse par d√©faut
    bot.on('message', (ctx) => {
        if (!ctx.message.text.startsWith('/')) {
            ctx.reply("Salut l'innovateur ! Je suis le bot Innovation. Utilisez `/brainstorm [sujet]` pour des id√©es ou `/trend [tendance]` pour une analyse.");
        }
    });

    console.log("Innovation Bot handler initialized.");
}

module.exports = { init };