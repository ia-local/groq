// bots/mainPibotHandler.js
const fs = require('fs');

let groq;       // Instance Groq (maintenant utilis√©e par d√©faut pour le texte)
let openai;
let genAI;      // Instance Gemini (maintenue si des usages sp√©cifiques sont pr√©vus, mais non utilis√©e par d√©faut ici)
let botsNetwork;

// Fonction g√©n√©rique pour la g√©n√©ration de contenu AVEC GROQ
async function generateContentWithGroq(prompt, systemInstruction, modelName = 'gemma2-9b-it') {
    console.log("DEBUG: generateContentWithGroq (pour Groq) appel√©e.");
    console.log("DEBUG: Prompt Groq:", prompt);
    console.log("DEBUG: System Instruction Groq:", systemInstruction);
    console.log("DEBUG: Mod√®le Groq:", modelName);

    try {
        if (!groq) {
            console.error("ERREUR: Instance Groq non initialis√©e dans generateContentWithGroq.");
            throw new Error("Groq API not initialized.");
        }

        const chatCompletion = await groq.chat.completions.create({
            messages: [
                { role: "system", content: systemInstruction },
                { role: "user", content: prompt },
            ],
            model: modelName,
            temperature: 0.7,
            max_tokens: 4048,
        });

        const content = chatCompletion.choices[0].message.content;
        console.log("DEBUG: R√©ponse de Groq re√ßue. Contenu:", content.substring(0, 200) + "...");
        return content;
    } catch (error) {
        console.error("Erreur lors de la g√©n√©ration de contenu avec Groq:", error);
        throw new Error("Une erreur est survenue lors de la g√©n√©ration de contenu avec Groq.");
    }
}

// Les fonctions suivantes utiliseront maintenant generateContentWithGroq
async function generateArabicContent(prompt) {
    try {
        const systemInstruction = "Vous √™tes une AGI, une intelligence artificielle sp√©cialis√©e dans la g√©n√©ration de contenu de tout type/format dans tout secteur d'activit√©. R√©pondez de mani√®re informative, cr√©ative et pr√©cise en arabe. Votre objectif est de fournir des informations de haute qualit√© ou des textes cr√©atifs en arabe.";
        const arabicContent = await generateContentWithGroq(prompt, systemInstruction); // <-- Utilise Groq
        return arabicContent;
    } catch (error) {
        console.error("D√©tails de l'erreur dans generateArabicContent (mainPibotHandler):", error);
        throw new Error("Une erreur est survenue lors de la g√©n√©ration de contenu en arabe.");
    }
}

async function generateGuide(subject) {
    try {
        const systemInstruction = `G√©n√©ration d'un guide. Votre r√¥le est de cr√©er un guide √©tape par √©tape sur le sujet donn√©.`;
        const guideContent = await generateContentWithGroq(`G√©n√®re un guide sur ${subject}.`, systemInstruction, 'gemma2-9b-it'); // <-- Utilise Groq

        const outputFilePath = `HowTo-${subject}_` + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
        fs.writeFileSync(outputFilePath, guideContent);
        return { content: guideContent, filePath: outputFilePath };
    } catch (error) {
        console.error("Une erreur s'est produite lors de la g√©n√©ration du guide (mainPibotHandler):", error);
        throw new Error(`Erreur : ${error.message}`);
    }
}

async function generateBusinessPlan(projectDetails) {
    try {
        const systemInstruction = `Vous √™tes un expert en cr√©ation de business plans d√©taill√©s et structur√©s. Vous allez g√©n√©rer un plan complet bas√© sur les informations fournies par l'utilisateur. Le plan doit inclure les sections suivantes, format√©es en Markdown pour une meilleure lisibilit√©, Tu utiliseras des emoji int√©lligent lorsque c'est possible :
                    1. R√©sum√© Ex√©cutif üìù
                    2. Description de l'Entreprise/Projet üí°
                    3. Analyse du March√© (Client√®le Cible, Concurrence) üìä
                    4. Produit/Service üöÄ
                    5. Strat√©gie Marketing et Ventes üéØ
                    6. Plan Op√©rationnel ‚öôÔ∏è
                    7. √âquipe de Gestion (si l'information est disponible) ü§ù
                    8. Plan Financier (Hypoth√®ses, Projections de revenus, Co√ªts principaux) üí∞
                    9. Strat√©gie de Mon√©tisation (si applicable) üí≤
                    10. Annexe (si n√©cessaire) üìé

                    R√©digez le business plan de mani√®re professionnelle, concise et claire. Adaptez le contenu aux d√©tails fournis par l'utilisateur.`;

        const bpContent = await generateContentWithGroq(`G√©n√®re un business plan bas√© sur les informations suivantes :
                    ${projectDetails}`, systemInstruction, 'gemma2-9b-it'); // <-- Utilise Groq

        if (!bpContent) {
            throw new Error("La g√©n√©ration du business plan n'a retourn√© aucun contenu.");
        }

        const projectName = projectDetails.substring(0, 50).replace(/[^a-zA-Z0-9]/g, '_');
        const outputFilePath = `BusinessPlan-${projectName}_` + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
        fs.writeFileSync(outputFilePath, bpContent);

        return { content: bpContent, filePath: outputFilePath };
    } catch (error) {
        console.error("Erreur d√©taill√©e lors de la g√©n√©ration du business plan avec Groq (mainPibotHandler):", error);
        throw new Error("Une erreur est survenue lors de la g√©n√©ration du business plan.");
    }
}

// NOTE: La fonction generateImage n√©cessite toujours l'instance OpenAI si elle est utilis√©e.
async function generateImage(prompt) {
    if (!openai) {
        throw new Error("OpenAI API not initialized. Cannot generate images.");
    }
    const response = await openai.images.generate({
        model: "dall-e-3",
        prompt: prompt,
        n: 1,
        size: "1024x1024",
        response_format: "url",
    });
    return response.data[0].url;
}


// This function will be called by the main server file to initialize the bot
function init(bot, dependencies) {
    groq = dependencies.groq;
    openai = dependencies.openai;
    genAI = dependencies.gemini; // Garde l'instance Gemini, m√™me si non utilis√©e par d√©faut
    botsNetwork = dependencies.botsNetwork;

    // D√©finition de votre r√¥le sp√©cifique pour le chatbot principal (pour Groq)
    const context = "Tu es une AGI, une intelligence artificielle de haut potentiel ma√Ætrisant les normes du Web s√©mantique W3C, langage de programmation associ√©e les techniques et les m√©thodes d'apprentissage automatique. Tu es au c≈ìur de notre salon t√©l√©gram.'";


    // --- Telegram Commands for this bot ---

    bot.command('start', (ctx) => {
        console.log("DEBUG: Commande /start re√ßue.");
        ctx.reply('Bonjour ! Je suis votre AGI principal, propuls√© par Groq, et je suis op√©rationnel ! Comment puis-je vous aider ?');
    });

    // Commande /arabe (maintenant propuls√©e par Groq)
    bot.command('arabe', async (ctx) => {
        console.log("DEBUG: Commande /arabe re√ßue.");
        const userInput = ctx.message.text.split(' ').slice(1).join(' ');
        if (!userInput) {
            ctx.reply("Ÿäÿ±ÿ¨Ÿâ ÿ™ŸÇÿØŸäŸÖ ŸàÿµŸÅ ŸÑŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿπÿ±ÿ®Ÿä ÿßŸÑÿ∞Ÿä ÿ™ÿ±ÿ∫ÿ® ŸÅŸä ÿ•ŸÜÿ¥ÿßÿ¶Ÿá. ŸÖÿ´ÿßŸÑ: `/arabe ÿßŸÉÿ™ÿ® ŸÖŸÇÿßŸÑŸãÿß ÿπŸÜ ÿ£ŸáŸÖŸäÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸÅŸä ÿßŸÑÿ™ÿπŸÑŸäŸÖ`");
            return;
        }
        ctx.reply("ÿ¨ÿßÿ±Ÿä ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿπÿ±ÿ®Ÿä via Groq, Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±...");
        try {
            const arabicContent = await generateArabicContent(userInput); // Utilise la fonction adapt√©e (Groq)
            await ctx.reply(arabicContent);
        } catch (error) {
            console.error("Erreur lors de l'ex√©cution de la commande /arabe:", error);
            ctx.reply("ÿπÿ∞ÿ±Ÿãÿßÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ.");
        }
    });

    bot.command('network', async (ctx) => {
        console.log("DEBUG: Commande /network re√ßue.");
        const task = ctx.message.text.split(' ').slice(1).join(' ');
        if (!task) {
            ctx.reply("Veuillez fournir une t√¢che pour coordonner le r√©seau de bots.");
            return;
        }
        ctx.reply("Coordination du r√©seau de bots en cours...");
        try {
            // Note: Ces appels simulent l'interaction. Pour une vraie interaction,
            // le bot principal devrait envoyer un message ou une commande au bot worker, etc.
            const backendResult = await botsNetwork.worker_Pibot.processBackend(task); // <-- Notez le _Pibot
            const frontendResult = await botsNetwork.neofs_Pibot.processFrontend(task); // <-- Notez le _Pibot
            const visualResult = await botsNetwork.Pi_ia_bot.processVisualAnalysis(task); // <-- Notez le _ia_bot

            const finalResult = `Coordination r√©ussie entre les bots :\n\n${backendResult}\n${frontendResult}\n${visualResult}`;
            ctx.reply(finalResult);
        } catch (error) {
            console.error("Erreur lors de l'ex√©cution de la commande /network:", error);
            ctx.reply("Erreur lors de la coordination.");
        }
    });

    // Commande /imagine (utilise toujours OpenAI pour DALL-E)
    bot.command('imagine', async (ctx) => {
        console.log("DEBUG: Commande /imagine re√ßue.");
        const userInput = ctx.message.text.split(' ').slice(1).join(' ');
        if (!userInput) {
            ctx.reply("Veuillez fournir une description pour g√©n√©rer l'image. Exemple: `[ G√©n√®re une image multidimensionnelle de haute d√©finition illustrant la beaut√© des meta donn√©es mettant en lumi√®re la nature des choses. l'image doit √™tre format 16:9 .webp]`");
            return;
        }
        ctx.reply("G√©n√©ration de l'image en cours via OpenAI, veuillez patienter...");
        try {
            const imageUrl = await generateImage(userInput);
            const responseFetch = await fetch(imageUrl);
            const arrayBuffer = await responseFetch.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);
            const fileName = `Image_${new Date().toISOString().replace(/[:.]/g, "-")}.webp`;
            fs.writeFileSync(fileName, buffer);
            await ctx.replyWithPhoto({ source: fileName }, { caption: `Voici votre image g√©n√©r√©e : ${userInput}` });
            fs.unlinkSync(fileName);
        } catch (error) {
            console.error("Erreur lors de l'envoi de l'image (mainPibotHandler):", error);
            ctx.reply("D√©sol√©, une erreur s'est produite lors de la g√©n√©ration de l'image.");
        }
    });

    // Commande /generate (maintenant propuls√©e par Groq)
    bot.command('generate', async (ctx) => {
        console.log("DEBUG: Commande /generate re√ßue.");
        const subject = ctx.message.text.split(' ')[1] || 'HowTo_';
        ctx.reply(`G√©n√©ration du guide pour le sujet : ${subject} via Groq...`);
        try {
            const { content: mdContent, filePath } = await generateGuide(subject); // Utilise la fonction adapt√©e (Groq)
            await ctx.reply(mdContent, { parse_mode: 'Markdown' });
            await ctx.replyWithDocument({ source: filePath }, { caption: `Le guide sur ${subject} a √©t√© g√©n√©r√© !` });
            fs.unlinkSync(filePath);
        } catch (error) {
            console.error("Erreur lors de l'ex√©cution de la commande /generate:", error);
            ctx.reply(`Erreur lors de la g√©n√©ration du guide.`);
        }
    });

    // Commande /plan (maintenant propuls√©e par Groq)
    bot.command('plan', async (ctx) => {
        console.log("DEBUG: Commande /plan re√ßue.");
        const userInput = ctx.message.text.split(' ').slice(1).join(' ');
        if (!userInput) {
            ctx.reply("Veuillez fournir les d√©tails de votre projet pour g√©n√©rer un business plan. \n\nExemple : `/businessplan Nom du projet: EcoGarden; Secteur: Agriculture urbaine; Produit: Kits de jardinage intelligents; Cible: Particuliers √©co-conscients; Objectifs: Vente 1000 kits en an 1.`");
            return;
        }
        ctx.reply("G√©n√©ration de votre business plan en cours via Groq, cela peut prendre quelques instants en fonction de la complexit√©. Veuillez patienter...");
        try {
            const { content: bpContent, filePath } = await generateBusinessPlan(userInput); // Utilise la fonction adapt√©e (Groq)
            await ctx.reply(bpContent, { parse_mode: 'Markdown' });
            await ctx.replyWithDocument({ source: filePath }, { caption: `Votre business plan a √©t√© g√©n√©r√© avec succ√®s !` });
            fs.unlinkSync(filePath);
        } catch (error) {
            console.error("Erreur lors de l'ex√©cution de la commande /plan:", error);
            ctx.reply("D√©sol√©, une erreur s'est produite lors de la g√©n√©ration de votre business plan. Veuillez v√©rifier votre requ√™te et r√©essayer.");
        }
    });

    // Gestionnaire de messages par d√©faut pour le chat g√©n√©ral (propuls√© par GROQ)
    bot.on('message', async (ctx) => {
        const message = ctx.message.text;
        console.log("DEBUG: Message non-commande re√ßu pour le chat g√©n√©ral (via Groq):", message);

        if (message.startsWith('/')) {
            console.log("DEBUG: Message est une commande, ignor√© par bot.on('message').");
            return;
        }

        if (!message || message.trim() === '') {
            console.log("DEBUG: Message vide ou juste des espaces, ignor√©.");
            return;
        }

        ctx.reply('R√©flexion en cours via Groq... ü§ñ');
        console.log("DEBUG: Message de 'R√©flexion en cours...' envoy√©.");

        try {
            const systemPrompt = context;
            const userPrompt = `Lorsque j'ex√©cute la commande /myprompt une Machine √† optimiser les prompts pour le \"Projet\". Voici ## votre contexte, ## vos r√¥les, ## vos comp√©tences, ## vos t√¢ches, ## votre processus, et ## les caract√©ristiques, ## Actions Imm√©diates recherch√©es, ## emoji intelligence associ√©e: ${message}`;

            console.log("DEBUG: Appelle generateContentWithGroq pour le chat g√©n√©ral.");
            const chatCompletion = await generateContentWithGroq(userPrompt, systemPrompt, 'gemma2-9b-it');

            if (chatCompletion) {
                await ctx.reply(chatCompletion);
                console.log("DEBUG: R√©ponse du chatbot (Groq) envoy√©e avec succ√®s.");
            } else {
                await ctx.reply("D√©sol√©, je n'ai pas pu g√©n√©rer de r√©ponse via Groq. Le contenu est vide.");
                console.error("ERREUR: generateContentWithGroq a retourn√© un contenu vide.");
            }

        } catch (error) {
            console.error('ERREUR: √âchec de la g√©n√©ration de la compl√©tion de chat avec Groq:', error);
            if (error.message.includes("Groq API not initialized") || error.message.includes("API key not valid")) {
                 await ctx.reply('‚ö†Ô∏è Erreur de configuration de l\'API Groq. Veuillez v√©rifier la cl√© API.');
            } else if (error.message.includes("Quota exceeded") || error.message.includes("rate limit")) {
                 await ctx.reply('‚ö†Ô∏è Limite de requ√™tes API Groq atteinte. Veuillez patienter ou v√©rifier votre quota.');
            } else {
                await ctx.reply('D√©sol√©, une erreur est survenue lors de la conversation avec l\'IA Groq.');
            }
        } 
    });

    console.log("Main PiBot handler initialized with full Groq support for text generation.");
}

module.exports = { init };